{
  "creator": "Jordan Hall",
  "title": "One Software Company to Rule them All",
  "link": "https://medium.com/practical-imagination/one-software-company-to-rule-them-all-41c629874e56?source=rss----a0abc4f51e04---4",
  "pubDate": "Sat, 07 Feb 2015 17:31:32 GMT",
  "content:encoded": "<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/660/1*HdDVfXWic7mGg-B_96BrLg.jpeg\" /></figure><h3>The League of Extraordinary Developers: One Software Company to Rule them All</h3><p>In this episode of practical imagination, I’m going to combine innovations from Dave Snowden (“<a href=\"http://cognitive-edge.com/\">Cognitive Edge</a>”), Frederic Laloux (“<a href=\"https://www.youtube.com/watch?v=gcS04BI2sbk\">Reinventing Organizations</a>”) and <a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CB4QFjAA&amp;url=http%3A%2F%2Fwww.valvesoftware.com%2Fcompany%2FValve_Handbook_LowRes.pdf&amp;ei=Z_LUVO-pHszEggSNjYGwDg&amp;usg=AFQjCNGmWgIlQd82l9JBQq0n2a6u61s9KA&amp;sig2=ET7SUgmLFMWQZ8McItSdIA&amp;bvm=bv.85464276,d.eXY\">Valve Software</a> to imagine a new approach to a software development company that, if it works, could sweep the table of all contemporary competition (I’m looking at you Google).</p><p>Warning, this is an example of practical imagination. It is not even quite an idea — it is the “spiritual prototype” of an idea. The intent is to explore some territory with the sort of thing that “could” happen and perhaps begin the process of bringing it to happening.</p><p><strong>Step One</strong>: Use <em>Sensemaker</em> to scalably identify the world’s most potentially talented software developers.</p><p>I’ve discussed my understanding of the underlying mechanics of Dave’s <em>Sensemaker</em> platform elsewhere. For present purposes, it works this way</p><ul><li>Input a selection of people whose sensemaker-type you want to type.</li><li>This generates a map of sensemaker characteristics that are consistent with this kind of person (if there is any consistency to be found).</li><li>Test other people against that map.</li><li>If their sensemakers are within a certain “distance” of your sample, you’ve found minds that naturally think like the kind of mind you are looking for.</li></ul><p>For this project, it would look like this:</p><p>Take 100 known “software development innovators.” These should be elite software developers who are renowned for their capacity to create extraordinary code. Run them through the process. They should write short (2–3 paragraph) stories about what they think are the most important/interesting/compelling areas for software development today.</p><p>They should also read a story written by someone else and “signify” it within the <em>Sensemaker</em> process. Signification involves:</p><p>a) Evaluating it against some abstract criteria organized in special “triads” (e.g., This story is about research, infrastructure or application. Or this story is important because it is “innovative, useful, elegant”).</p><p>b) Estimating it against a qualitative expectation. e.g., “Immediately actionable — interesting experiment-long range research”. Notably, this estimation generally will involve both a personal estimation (I think that . . .) and an assessment of the community as a whole (The community as a whole likely thinks that . . .)</p><p>This activity will output a tremendously rich map. It will provide a peer evaluated resource of “the most interesting areas for software development today” and it will generate a “fitness landscape” of the sensemaking characteristics that are consistent with the kind of mind we are looking for.</p><p>The next step is to create an open game that any aspiring (young?) software developer in the world can play. They can come into a site where they can do the same thing we asked our sample to do — write a story about what they think is the most interesting software project in the world today and signify, say, three stories.</p><p>Everyone gets something out of this process. For all of the “aspirants” and the “elites” at a minimum they get a “software developer genotype” that tells them where they seem to fit on the landscape and they get rich “wisdom of the crowd” feedback on their proposal.</p><p>But the real interesting stuff happens next.</p><p><strong>Step Two</strong>: form the League</p><p>The League works this way:</p><ul><li>If you are among the top X of those who were evaluated in Step One, you are issued an apprentice membership.</li><li>As an apprentice, you can see all of the projects that have been proposed (and evaluated) in the system and those that are being actively worked on by the League. You can participate in any way you like, including creating your own projects.</li><li>Optionally you can receive some package of resources/compensation. Say the purchasing power parity equivalent of $5,000 in San Jose, CA. [e.g., in Mumbai that might be 110,000 R.]</li><li>After six months, you can apply for full membership.</li><li>A panel of (10) other members of the League will evaluate you for membership. Importantly the criteria for membership have nothing to do with “what” you did during your apprenticeship, but “how” you did it. Can you place nicely with others? Can you self-manage in the community? Are you able to accept good faith criticism? We already “know” that you have the right kind of mind to be a software innovator — what we are looking for is EQ, not IQ.</li><li>Your application will either resolve to an invitation to full membership, an invitation to another six month apprenticeship (of which there can be only a total of twelve months for any “aspirant”) with feedback on how to level-up, or a rejection from membership.</li><li>If you are invited to full membership, you will then follow the “salary setting process” outlined by Laloux: 1) articulate your contributions to the community and suggest an appropriate (PPP equivalent) salary; 2) get feedback from some set of peers; 3) acknowledge that you have listened to and heard feedback; 4) publicly and transparently set your salary where <em>you</em> think it is appropriate.</li></ul><p>Yep, you heard me. Laloux argues that so long as everything is transparent (including all of the feedback), this process does an extraordinary job of setting appropriate salary levels, while simultaneously maximizing autonomy and a sense of belonging. Just the kind of stuff that generates the best form of “<a href=\"https://www.youtube.com/watch?v=u6XAPnuFjJc\">innovative culture</a>”.</p><p><strong>Step Three</strong>: run the League</p><p>At a high level, the League consists of four major components:</p><ol><li>Shared infrastructure. This should be an environment that would make any software developer smile. Good code management. High performance cloud computing infrastructure. Easy to find the right code to solve your problems. Easy to find the right people to collaborate with.</li><li>A performance management and conflict resolution team. This will prove a key component. Some fraction of League resources should be spent maintaining a cadre of people who are really good at helping elite software developers expand their capacities. This should include everything from things like bio-hacking (aka diet and exercise) to “sensemaker improvement” (aka dealing with your own shit) to collaboration capacity-building (aka how to place nice with others). Every member of the League, and the League itself, should make a commitment to the continual actualization of the capacities of every other member. <em>We are here to help extraordinary people be extraordinary — great software is the result</em>.</li><li>Recruiting. The League should be come the place that any aspiring software developer wants to be. It should be able to recruit the absolute best everywhere in the world. This involves constantly improving the reach and fidelity of the system described in Step One and constantly delivering on the promise above. Within the limits of resources (see below) and the ability of the League to enculturate new aspirants with confidence, the objective should be to recruit aggressively. An achieveable target would be to have 250,000 full league members within 10 years.</li><li>Capital management. Obviously, the League will have finite resources to operate and will require a capital allocation function. At a high level, this function should be designed to take advantage of maximum “collective intelligence.” This might be best done with a mixture of AI and “liquid democracy”. On the AI side, all of the financial information in the League will be constantly tracked in realtime and processed to give information on estimated cashflows and projected capital needs. On the liquid democracy side, one could imagine that some fraction of capital reserves would be assigned to every League member for either direct or proxy application. So for example, if a core of League members believed that it was useful for the League to buy facilities in Iceland for cloud computing infrastructure, they could self-assemble a team to do the work and proxy enough capital to them to do it. Returning to the AI, it would seem entirely likely that an organization like the League would turn some of its enormous capacity towards, for example, tracking the capital allocation performance of every member of the League and empirically surfacing the “team most likely” to effectively execute on any given mission. This is all downstream fun, of course, for when the League has captured dominant markeshare in every software market and has an unreasonably large amount of excess capital to deploy. For the first five years, the expectation would be that most capital allocation would go into salaries and core computational infrastructure and would be relatively simply managed.</li></ol><p><strong>Step 4</strong>. ?!?</p><p>What might happen if you were able to gather together a quarter million of the most innovative software developers in the world, cultivate each of them to peak emotional, physical and mental capacity and give them everything they need to achieve the farthest limits of that capacity? I’m not sure. But I’m guessing it would be well worth the price of admission?</p><p>Now an obvious objection is that “developers do not an effective company make”. For example — what of sales and marketing? Many are the companies that have foundered on the shores of “engineering driven” product.</p><p>But recall: our process did not begin with “engineers”. It began with individuals who have sensemakers that are akin to those of the most innovative software developers in the world. These are general purpose minds, capable of innovative problem solving in general. And this is where the “Valve model” comes in.</p><p>So long as every member of the League has good reason to take the success of “the whole” as a major part of their intent and to feel both motivated and empowered to take ownership of the success of the League in general, we should expect to be able to take advantage of the complete “collective intelligence” available to the League to solve any particular problem.</p><p>Of course, minds like those selected for in the League will tend to solve problems differently. There will tend to be a natural attraction to “platform solutions” — the kinds of solutions that scale and solve problems in general rather than in specific. Solutions like inventing “Steam” to route around brick and mortar retail and solve the problem of “how do we sell enterainment software” categorically. Or solutions like Ad Words to route around Madison Avenue and solve the problem of “how do we optimally monetize search traffic at scale”?</p><p>In other words, my strategic response to any tactical problem is: give me thousands of the most innovative practical minds in the world and I’m quite confident that we will find an adequate solution — and reasonably confident that we will generate a qualitative breakthrough solution.</p><p><strong>So, how might something like this be done?</strong></p><p>It is surprisingly simple.</p><p>The hard part (as is the usual case) is the beginning: identifying, attracting and assembling the population of seed software development Elites. The good news is that they don’t need to leave their day jobs — they just need to spend 30 minutes doing some signification and perhaps agree to drop into the League as “emeritus” members for a bit. Nonetheless, this is the hard challenge — identifying and attracting a couple hundred great minds to play a new game.</p><p>Once you have this the rest is relatively easy. Constructing and launching the Sensemaker “recruiting” game is relatively straightforward. Think 12 months an a quarter million dollars. Not chump change, but really nothing compared to the potential upside.</p><p>Then you need to have enough runway to let the League run and mature and get to the point of “self-sustaining” generativity. How long is that? How much? A lot depends, of course, on the kinds of salaries that League members decide to set for themselves. Which, in turn, depends on who they are, where they live and what they intend.</p><p>It seems like this might be an excellent vehicle for the emerging space of “crypto” crowdfunding. Ethereum, for example, has recently raised more than $10M USD equivalent through the pre-sale of a cryptocurrency. The advantage of this kind of approach is that it allows “rolling capitalization” at a level of granularity that is much more sensitive than analog capital markets. Raise $500k equivalent to kick off the search. As you see the kind of talent why is joining the league and watch what you are doing, periodically take in small chunks of crypto capital in response to the real increase in the value-potential of the League. When you are talking about finding and empowering people like <a href=\"http://en.wikipedia.org/wiki/Bram_Cohen\">Bram Cohen</a>, <a href=\"http://en.wikipedia.org/wiki/Markus_Persson\">Markus Persson</a>, and <a href=\"http://en.wikipedia.org/wiki/Janus_Friis\">Janus Friis</a>, the likelyhood that interesting things will result is relatively high . . .</p><p>Naturally, there are many coordination and logistical problems to be solved with this model. Distributed intelligence networks have the advantage of more raw intelligence — but the disadvantage of less focus. This means that they can flounder around problems that command-and-control approaches would be able to laser-focus on and power through. At the same time, if and when something like the League gets to the point of humming, it presents the potential of the kind of breakthrough upside that changes whole economies.</p><p>Just the kind of Practical Imagination that is thought-provoking in these most thought-provoking times.</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=41c629874e56\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/practical-imagination/one-software-company-to-rule-them-all-41c629874e56\">One Software Company to Rule them All</a> was originally published in <a href=\"https://medium.com/practical-imagination\">Practical Imagination</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>",
  "dc:creator": "Jordan Hall",
  "guid": "https://medium.com/p/41c629874e56",
  "isoDate": "2015-02-07T17:31:32.000Z",
  "publishedAt": "2015-02-07T17:31:32.000Z",
  "image": "https://cdn-images-1.medium.com/max/660/1*HdDVfXWic7mGg-B_96BrLg.jpeg",
  "collections": [
    "https://medium.com/feed/practical-imagination"
  ],
  "_id": "41c629874e56"
}